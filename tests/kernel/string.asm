STRCMP:
    ; STR1 = G0
    ; STR2 = G1
STRCMP_LOOP:
    CMP8 [G0], [G1]
    JNE STRCMP_FAIL
    CMP8 [G0], 0
    JE STRCMP_SUCCESS
    ADD64 G0, 1
    ADD64 G1, 1
    JMP STRCMP_LOOP
STRCMP_SUCCESS:
    MOV8 G2, 0
    RET
STRCMP_FAIL:
    MOV8 G2, 1
    RET

COUNT_NUMS:
    ; Number = G0
    ; Result = G2
    PUSH64 G0
    MOV64 G2, 0
COUNT_NUMS_LOOP:
    CMP64 G0, 0
    JE COUNT_NUMS_EXIT
    ADD64 G2, 1
    DIV64 G0, 10
    JMP COUNT_NUMS_LOOP
COUNT_NUMS_EXIT:
    POP64 G0
    RET

ITOA:
    ; G0 = NUM
    ; G1 = BUFFER
    CMP64 G0, 0
    JE ITOA_ZERO
    PUSH64 G2
    PUSH64 G3
    CALL COUNT_NUMS
    SUB64 G2, 1
    ADD64 G2, 1
    MOV8 [G1+G2], 0
    SUB64 G2, 1
ITOA_LOOP:
    CMP64 G0, 0
    JE ITOA_EXIT
    MOV64 G3, G0
    REM64 G3, 10
    ADD64 G3, 48
    MOV8 [G1+G2], G3
    SUB64 G2, 1
    DIV64 G0, 10
    JMP ITOA_LOOP
ITOA_ZERO:
    MOV8 [G1], 48
    MOV8 [G1+1], 0
    RET
ITOA_EXIT:
    POP64 G3
    POP64 G2
    RET

ATOI:
    ; G0 = BUFFER
    ; G1 = NUM
    PUSH64 G2
    MOV64 G1, 0
ATOI_LOOP:
    CMP8 [G0], 0
    JE ATOI_EXIT
    MOV8 G2, [G0]
    SUB8 G2, 48
    ADD64 G1, G2
    CMP8 [G0+1], 0
    JE ATOI_EXIT
    MUL64 G1, 10
    ADD64 G0, 1
    JMP ATOI_LOOP
ATOI_EXIT:
    POP64 G2
    RET